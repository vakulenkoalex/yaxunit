//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеТипа(Тип) Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТОбщий.МетодНеДоступен("ЮТТипыДанныхСлужебный.ПредставлениеТипа");
#Иначе
	Возврат ИдентификаторТипа(Тип);
#КонецЕсли
	
КонецФункции

Функция ИдентификаторТипа(Тип) Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТОбщий.МетодНеДоступен("ЮТТипыДанныхСлужебный.ПредставлениеТипа");
#Иначе
	ЮТПроверкиСлужебный.ПроверитьТипПараметра(Тип, Тип("Тип"), "ЮТТипыДанныхСлужебный.ИдентификаторТипа", "Тип");
	
	Если Тип = Тип("Дата") Тогда
		ИдентификаторТипа = "date";
	ИначеЕсли Тип = Тип("Число") Тогда
		ИдентификаторТипа = "number";
	Иначе
		//@skip-check Undefined variable
		ИмяТипаСПространствомИмен = СериализаторXDTO.ЗаписатьXDTO(Тип).ЛексическоеЗначение;
		ИдентификаторТипа = СтрРазделить(ИмяТипаСПространствомИмен, "}")[1];
	КонецЕсли;
	
	Возврат ИдентификаторТипа;
#КонецЕсли
	
КонецФункции

Функция ТипПоИдентификатору(ИдентификаторТипа) Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТОбщий.МетодНеДоступен("ЮТТипыДанныхСлужебный.ПредставлениеТипа");
#Иначе
	Возврат Тип(ИдентификаторТипа);
#КонецЕсли
	
КонецФункции

Функция ЭтоСсылочныйТип(Тип) Экспорт
	
	Возврат Тип <> Неопределено И ЮТОбщий.ОписаниеТиповЛюбаяСсылка().СодержитТип(Тип);
	
КонецФункции

Функция ЭтоМенеджерЗаписи(ТипЗначения) Экспорт
	
	ПредставлениеТипа = ПредставлениеТипа(ТипЗначения);
	Возврат СтрНайти(ПредставлениеТипа, "RecordManager.") > 0;
	
КонецФункции

Функция ЭтоТипОбъекта(ТипЗначения) Экспорт
	
	ПредставлениеТипа = ПредставлениеТипа(ТипЗначения);
	Возврат СтрНайти(ПредставлениеТипа, "Object.") > 0;
	
КонецФункции

Функция ЭтоТипНабораЗаписей(ТипЗначения) Экспорт
	
	ПредставлениеТипа = ПредставлениеТипа(ТипЗначения);
	Возврат СтрНайти(ПредставлениеТипа, "RecordSet.") > 0;
	
КонецФункции

Функция ЭтоТипОбъектаОбработкиОтчета(ТипЗначения) Экспорт
	
	ПредставлениеТипа = ПредставлениеТипа(ТипЗначения);
	Возврат СтрНачинаетсяС(ПредставлениеТипа, "DataProcessorObject.") Или СтрНачинаетсяС(ПредставлениеТипа, "ReportObject.");
	
КонецФункции

Функция ЭтоТипМенеджера(ТипЗначения) Экспорт
	
	ПредставлениеТипа = ПредставлениеТипа(ТипЗначения);
	Возврат СтрНайти(ПредставлениеТипа, "Manager.") > 0;
	
КонецФункции

Функция ТипОбъектаСсылки(ТипСсылки) Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТОбщий.МетодНеДоступен("ЮТТипыДанныхСлужебный.ТипОбъектаСсылки");
#Иначе
	ТипXML = СериализаторXDTO.XMLТип(ТипСсылки);
	ИмяТипа = СтрЗаменить(ТипXML.ИмяТипа, "Ref.", "Object.");
	
	Возврат СериализаторXDTO.ИзXMLТипа(ИмяТипа, ТипXML.URIПространстваИмен);
#КонецЕсли
	
КонецФункции

#Область СистемныеПеречисления

Функция ЭтоСистемноеПеречисление(Тип) Экспорт
	
	Возврат ТипыСистемныхПеречислений().СодержитТип(Тип);
	
КонецФункции

Функция ТипыСистемныхПеречислений() Экспорт
	
	Возврат Новый ОписаниеТипов(
		"ВидДвиженияБухгалтерии,
		|ВидДвиженияНакопления,
		|ВидПериодаРегистраРасчета,
		|ВидСчета,
		|ВидТочкиМаршрутаБизнесПроцесса,
		|ИспользованиеГруппИЭлементов,
		|ИспользованиеСреза,
		|ИспользованиеРежимаПроведения,
		|РежимАвтоВремя,
		|РежимЗаписиДокумента,
		|РежимПроведенияДокумента,
		|ПериодичностьАгрегатаРегистраНакопления,
		|ИспользованиеАгрегатаРегистраНакопления");
	
КонецФункции

Функция ИмяСистемногоПеречисления(Тип) Экспорт
	
	Возврат Строка(Тип);
	
КонецФункции

Функция ЭтоКоллекцияПримитивныхТипов(Типы) Экспорт
	
	Для Каждого Тип Из Типы Цикл
		
		Если НЕ ЭтоПримитивныйТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоПримитивныйТип(Тип) Экспорт
	
	ПримитивныеТипы = ЮТПовторногоИспользования.ПримитивныеТипы();
	
	ТипПараметра = ТипЗнч(Тип);
	
	Если ТипПараметра = Тип("Тип") Тогда
		Возврат ПримитивныеТипы.Найти(Тип) <> Неопределено;
	КонецЕсли;
	
	Для Каждого Тип Из Тип.Типы() Цикл
		
		Если ПримитивныеТипы.Найти(Тип) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
